plugins {
    // Apply the java plugin to add basic functionality for Java Code.
    id 'java'


    id("java-library")

    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'

    // Apply the jacoco plugin to add support for test reports on test code coverage.
    id 'jacoco'

    // Apply the javafx plugin to add support for GUI development for the project in java. 
    id 'org.openjfx.javafxplugin' version '0.0.13'
}


tasks.withType(JavaCompile) {
    options.release = 17
}


sourceCompatibility = 17
targetCompatibility = 17

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
      tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
      }
    }
} // non ascii characters make it crash

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

javafx {
    version = '17.0.2'
    modules = ['javafx.controls', 'javafx.media']
}

group 'org.example'
version '1.0-SNAPSHOT'

dependencies {
    // Use JUnit test framework.
    // testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'

    // Adds sqlite3, and the java driver
    implementation group: 'org.xerial', name: 'sqlite-jdbc', version: '3.36.0.3'
}

application {
    // Define the main class for the application.
    mainClass = 'VendingMachine.App'
}

test {
    useJUnitPlatform()
}

task jtr {
    dependsOn test
    dependsOn jacocoTestReport
}

javadoc { 
    sourceSets {
        build {
            java.srcDir file('src/main/java/VendingMachine')

        }
    }
} 


jacocoTestReport {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: "build/classes/java/main/CurrencyConverter",
                    exclude: ['WelcomeScreen.class'])
        }))
    }
}


jar {
    archiveBaseName = 'Vending-Machine'
    archiveVersion =  '1.0.0'

    manifest {
    attributes(
        'Class-Path': configurations.runtimeClasspath.files.collect { it.getName() }.join(' '),
        'Main-Class': 'vending-machine.App'
    )
  }
}

version = '1.1'

task fatJar(type: Jar) {

    archiveBaseName = 'Vending-Machine'
	manifest {
        attributes 'Implementation-Title': 'Vending Machine',  
        	'Implementation-Version': version,
        	'Main-Class': 'vending-machine.App'
    }
    baseName = project.name + '-all'
    from { configurations.runtimeClasspath.files.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}